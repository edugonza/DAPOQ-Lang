allClasses() where { getId() == 1 }

allClasses() where { id > 1 } where { id > 0 } where { name.contains("S") }

//allClasses() where { id > 1 } where { id > 0 } where { name.contains("S") }

//versionsOf ( allClasses().where { id == 3} ) where { id == 3257 }

// versionsOf allClasses().where { id == 3} where { id == 3257 } 

//classesOf(versionsOf(allClasses()))

def a = allClasses() where { name == "TICKET" }

def b = 
classesOf(
	versionsOf(
		allClasses().where{ id == 1})
	.where{ id == 3158 })
.where { name == "CONCERT" }
.union(
	allClasses().where { name == "SEAT" }
)

allEvents() where { has(at.TABLE_NAME) && at.TABLE_NAME == "CUSTOMER" }


allVersions() where { at.PRICE == "35" }

def b = versionsOf(allClasses().where { name == "CUSTOMER"})

def a = allVersions().where { at.CUSTOMER_NAME.contains("141")}


//
def p = createPeriod("2016-01-01 00:00:00","2016-03-01 00:00:00");

//periodsOf(allVersions().where{ id == 163784})

allVersions().where { id == 163784 && during(globalPeriod(it),p)}
//

//
def p = createPeriod("2016-01-01 00:00:00","2016-03-01 00:00:00");

def a = objectsOf(p).excluding(objectsOf(allClasses().where{name == "CUSTOMER"}));

def b = versionsOf(a).where { during(globalPeriod(it),p) }
//


/**/
/*
def p = globalPeriod (allActivities().where{
	name.contains("Afwijzing")
	})
	*/
//return periodsOf(p)
//allActivities().where{ during(globalPeriod(it),globalPeriod(casesOf()) }
/*
allActivities().where {
	before(globalPeriod(it),p)
}
*/


/**/
def allC = allCases();

def results = allActivities().where { false };

for (Object c : allC.result) {
	def e = eventsOf(c).where { !activitiesOf(it).where { name.contains("Afwijzing") }.result.isEmpty() };
	def pe = globalPeriod(e);
	def ebef = eventsOf(c).where { before(globalPeriod(it),pe) };
	results = results.union(activitiesOf(ebef));
}

return results
/**/

allVersions() where { (at.CustomerId as Float) > 30470 }

allEvents() where { ( (at.CustomerID ?: "0") as Float) > 30 }

//
def p = createPeriod("2016-01-01 00:00:00","2016-01-03 00:00:00");

casesOf(p)
//

allEvents() where { has(at.CustomerID) }



//def b = allEvents() where {at.CustomerID && ((at.CustomerID as Float) > 85000) }

allEvents() where { !blabla }


/**/
def allC = allCases().where { id < 10} ;

def results = allActivities().where { false };

def eventsN = eventsOf(allActivities().where{ name.contains("Afwijzing") });

int i = 0;
for (Object c : allC.result) {
	def ec = eventsOf(c);
	def e = eventsN.intersection(ec);	
	def pe = globalPeriod(e);
	def ebef = ec.where { before(globalPeriod(it),pe) };
	results = results.union(activitiesOf(ebef));
	i++;
	System.out.println(i);
}

return results
/**/